name: "Terraform Infrastructure Deployment"

on:
  workflow_dispatch:

# Prevent concurrent runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_LOG: INFO
  TF_LOG_PATH: terraform.log

jobs:
  terraform:
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2

      - name: Configure Terraform Backend
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "gcs" {
              bucket = "terraform-state-${GITHUB_REPOSITORY_OWNER}"
              prefix = "terraform/state"
            }
          }
          EOF
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Authenticate to Google Cloud
        id: auth
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          export PROJECT_ID=$(cat /tmp/gcp-key.json | jq -r '.project_id')
          gcloud config set project $PROJECT_ID
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup State Bucket
        run: |
          gsutil ls -b gs://terraform-state-${GITHUB_REPOSITORY_OWNER} || \
          gsutil mb -l us-central1 gs://terraform-state-${GITHUB_REPOSITORY_OWNER}
          gsutil versioning set on gs://terraform-state-${GITHUB_REPOSITORY_OWNER}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Select Workspace
        run: |
          terraform workspace select default || terraform workspace new default
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Import Existing Resources
        run: |
          # Function to handle imports with retries
          import_with_retry() {
            local resource=$1
            local id=$2
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Importing $resource (attempt $attempt/$max_attempts)..."
              if terraform import "$resource" "$id"; then
                echo "Successfully imported $resource"
                return 0
              fi
              echo "Import failed, waiting before retry..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "Failed to import $resource after $max_attempts attempts"
            return 1
          }

          # Import dataset
          import_with_retry "google_bigquery_dataset.payroll_dataset" "${{ steps.auth.outputs.project_id }}:payroll_analytics"

          # Import tables
          for table in cpa_firms businesses employees pay_periods payroll_records deductions taxes employee_payroll_summary; do
            import_with_retry "google_bigquery_table.$table" "${{ steps.auth.outputs.project_id }}.payroll_analytics.$table"
          done
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -out=tfplan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          if ! terraform apply -auto-approve tfplan; then
            echo "Terraform apply failed. Initiating rollback..."
            terraform destroy -auto-approve \
              -var="db_password=${{ secrets.DB_PASSWORD }}"
            exit 1
          fi
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Output Infrastructure Details
        if: success()
        run: |
          echo "Cloud SQL Instance: $(terraform output -raw instance_connection_name)"
          echo "Database Name: $(terraform output -raw database_name)"
          echo "BigQuery Dataset: $(terraform output -raw bigquery_dataset_id)"
          echo "Datastream ID: $(terraform output -raw datastream_stream_id)"

      - name: Upload Terraform Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-logs
          path: terraform.log
          retention-days: 7

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "Cleaning up resources..."
          terraform destroy -auto-approve \
            -var="db_password=${{ secrets.DB_PASSWORD }}"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
